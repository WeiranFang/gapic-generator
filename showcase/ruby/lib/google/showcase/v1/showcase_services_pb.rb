# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: google/showcase/v1/showcase.proto for package 'google.showcase.v1'
# Original file comments:
# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'grpc'
require 'google/showcase/v1/showcase_pb'

module Google
  module Showcase
    module V1
      module Showcase
        # A service to showcase Generated API Client features and common API patterns
        # used by Google.
        class Service

          include GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = 'google.showcase.v1.Showcase'

          # A method used to show unary methods. This method will return the message
          # that was given.
          rpc :Echo, EchoRequest, EchoResponse
          # A method used to show server-side streaming methods. This method will
          # split the given content into words and will pass each word back through
          # the stream.
          rpc :Expand, ExpandRequest, stream(EchoResponse)
          # A method used to show client-side streaming methods. This method will
          # collect the contents given to it. When the stream is closed by the client,
          # this method will return the a concatenation of the strings passed to it.
          rpc :Collect, stream(EchoRequest), EchoResponse
          # A method that will be used to show bidirectional streaming methods. Upon
          # receiving a request on the stream, the same content will be passed back
          # on the stream.
          #
          rpc :Chat, stream(EchoRequest), stream(EchoResponse)
          # This method is to show how a client handles a request timing out. The
          # server will wait the requested amount of response_delay and then return
          # the response specified in the request.
          rpc :Timeout, TimeoutRequest, TimeoutResponse
          # This method is used to setup the Retry method. The given list of retry behavior
          # will be bound to an ID defined by the server. Subsequent Retry requests
          # of the given ID will respond with the behavior specified in this request.
          rpc :SetupRetry, SetupRetryRequest, RetryId
          # This method is used to show how a client handles errors that can be
          # retried. Requests to a given RetryId will respond in the way specified
          # in SetupRetry method.
          rpc :Retry, RetryId, Google::Protobuf::Empty
          # This method is used to show how a client handles a long running operation.
          # Upon receiving a request, the server will create a new ID and mark that
          # the ID created will complete at the time denoted in the request. If the
          # completion time has already passed, the server will return a longrunning
          # operation that signifies a completed operation. Upon subsequent requests
          # to the operations mixin service, if the operation is incomplete, the
          # the server will return metadata denoting the percent that the operation
          # is complete, else the server will return a completed operation that will
          # either denote that the operation has succeeded or failed.
          rpc :Longrunning, LongrunningRequest, Google::Longrunning::Operation
          # This method is used to show how a client will handle a method that lists
          # responses in a paginated method. The request will specify an ID and the
          # maximum number of responses to return. If the ID has not been seen before
          # the server will mark the ID specified and the maximum number to be
          # returned. The page token will be a stringified integer denoting the
          # the number to start the page at.
          rpc :Pagination, PaginationRequest, PaginationResponse
          # This method is used to show how a client will handle configuration to
          # flatten a request. The server will simply echo the request and
          rpc :ParameterFlattening, ParameterFlatteningMessage, ParameterFlatteningMessage
          # This method is used to show how a client will handle request strings that
          # are configured to follow a certain pattern or set of patterns. The server
          # will simply echo the request.
          rpc :ResourceName, ResourceNameMessage, ResourceNameMessage
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
